
// CONTEXT
// - This code is part of a Telegram bot that handles webhook updates from Telegram
// - The Telegram bot is based on the telegraf.js NPM package
// - Assume multiple instances of bots are created and served by one web server
// - The code describes a `scene` (telegraf.js concept) for users to manage their banks (list, add, delete)
// - This code is called by a bot instance after instantiation and before it is served by the web server
// - Assume that part of the refactoring involves porting the code to TypeScript

// TASK
// - Review this code and suggest ways to refactor the code
// - Be as critical as possible

// Feel free to ask anything that you need further clarification on



// Below are references from the telegraf package
// The API can be referred to at https://telegraf.js.org/
const { Markup } = require('telegraf');
const { message } = require('telegraf/filters');

// common.js is a shared utility library
// シーン is an enum of all `scenes` in this system
// noComprende is a utility function to handle unexpected user input
// log is a utility function to log any error messages
const { シーン, noComprende, log } = require('./common.js');

// Below `scene` parameter is an instance of `telegraf.Scene.BaseScene` that is created in the calling bot code and passed in here
// `ctx` is the telegraf context object that holds information about the current request and session
// `ctx.session` holds current session state
// `ctx.stub.xxx` are API calls to manipulate the bank data in the database
// `ctx.reply` and `ctx.reply$` are to make replies back to the Telegram user of the current request
exports.bankHandler = scene => {

	scene.enter(async (ctx) => {
		try {
			let caption = '';
			const menuButton = Markup.button.callback('Main Menu', 'menuAction');
			const response = await ctx.stub.getMemberBanks(ctx.from.id);

			if (response.success && response.dataList) {
				// If there is no member_bank available, go to bank selection straight.
				if (response.dataList.length < 1) {
					await addBankAction(ctx);
				} else {
					await myBankAction(ctx);
				}
			}
			else {
				caption = 'Failed to get list of your banks.';
				await ctx.reply(caption, Markup.inlineKeyboard([menuButton]))
					.then(msg => ctx.addToHistory(msg.message_id));
			}
		} catch (err) {
			await log(ctx, err);
		}

	});

	scene.action('myBankAction', async ctx => {
		clearSession(ctx);
		await myBankAction(ctx);
	});

	scene.action('addBankAction', async ctx => {
		await addBankAction(ctx);
	});

	scene.action('deleteBankAction', async (ctx) => {
		try {
			let caption = 'Select bank to delete:\n';
			const backButton = 'Back';
			const response = await ctx.stub.getMemberBanks(ctx.from.id);
			let inlineKeyboard = [];
			let buttonArray = [];

			if (response.success && response.dataList.length) {
				ctx.session.DeleteBankList = response.dataList.sort((a, b) => (a.name.localeCompare(b.name)));
				const bank_names = new Set(ctx.session.DeleteBankList.map(bank => bank.name));
				if (bank_names.size) {
					bank_names.forEach(name => {
						buttonArray.push(Markup.button.callback(name, 'selectDeleteBankTypeAction:' + name));
					});
				}
				while (buttonArray.length > 0) {
					inlineKeyboard.push(buttonArray.splice(0, 3));
				}
			}
			else {
				caption = 'You do not have any banks to delete.';
			}
			inlineKeyboard.push([Markup.button.callback(backButton, 'backAction')]);
			inlineKeyboard = Markup.inlineKeyboard(inlineKeyboard);
			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id));
		} catch (err) {
			await log(ctx, err);
		}
	});

	scene.action(/^selectDeleteBankTypeAction:(.*)/, async (ctx) => {
		let caption = 'Your banks:\n';
		let buttonArray = [];
		let inlineKeyboard = [];
		let acc_list = ctx.session.DeleteBankList.filter(function (val) {
			return val.name == ctx.match[1];
		});

		if (acc_list.length == 1) {
			ctx.session.DeleteMemberBankId = acc_list[0].id;
			await selectDeleteBank(ctx);
			return;
		}

		acc_list.forEach(function (val, index) {
			caption += `${index + 1}.\nBank: ${val.name || '-'}\nAccount Name: ${val.accountHolderName || '-'}\nAccount No: ${val.accountNumber || '-'}`;
			buttonArray.push(Markup.button.callback(index + 1, 'selectDeleteBankAction:' + val.id));
		});
		const menuButton = 'Main Menu';
		const backButton = 'Back';
		while (buttonArray.length > 0) {
			inlineKeyboard.push(buttonArray.splice(0, 5));
		}
		inlineKeyboard.push([Markup.button.callback(backButton, 'myBankAction'), Markup.button.callback(menuButton, 'menuAction')]);
		inlineKeyboard = Markup.inlineKeyboard(inlineKeyboard);
		await ctx.reply(caption, {
			parse_mode: 'HTML',
			...inlineKeyboard
		})
			.then(msg => ctx.addToHistory(msg.message_id));
	});

	scene.action(/^selectDeleteBankAction:(.*)/, async (ctx) => {
		ctx.session.DeleteMemberBankId = ctx.match[1];
		await selectDeleteBank(ctx);
	});

	scene.action(/^selectBankAction:(.*):(.*)/, async (ctx) => {
		ctx.session.SettingAction = 'EnterAccountName';
		ctx.session.AddBankId = ctx.match[1];
		ctx.session.AddBankName = ctx.match[2];
		const caption = `Bank: ${ctx.session.AddBankName}\nEnter Account Name:`;
		const backButton = 'Back';
		const inlineKeyboard = Markup.inlineKeyboard([
			[Markup.button.callback(backButton, 'myBankAction')],
		]);
		await ctx.reply(caption, inlineKeyboard)
			.then(msg => ctx.addToHistory(msg.message_id));
	});

	scene.action('addBankAPIAction', async ctx => {
		try {
			const response = await ctx.stub.addMemberBank(ctx.from.id, ctx.session.AddBankAccountNo, ctx.session.AddBankAccountName, ctx.session.AddBankId);
			let caption = '';
			let inlineKeyboard = [];
			const menuButton = 'Main Menu';
			if (response.success) {
				const backButton = 'My Banks';
				inlineKeyboard = Markup.inlineKeyboard([
					[Markup.button.callback(backButton, 'myBankAction')],
					[Markup.button.callback(menuButton, 'menuAction')]
				]);
				clearSession(ctx);
				let bank = response.data;
				caption = `SUCCESS!\nBank: ${bank.name || '-'}\nAccount Name: ${bank.accountHolderName || '-'}\nAccount No: ${bank.accountNumber || '-'}`;
			}
			else {
				inlineKeyboard = Markup.inlineKeyboard([
					[Markup.button.callback(menuButton, 'menuAction')]
				]);
				if (response.message.includes('UNIQ')) {
					caption = `The bank already exists.`;
				} else {
					caption = `Invalid bank details entered.`;
				}
			}

			await ctx.reply(caption, { parse_mode: 'HTML', ...inlineKeyboard })
				.then(msg => ctx.addToHistory(msg.message_id));

		} catch (err) {
			await log(ctx, err);
		}
	});

	scene.action('deleteBankAPIAction', async (ctx) => {
		try {
			const response = await ctx.stub.deleteMemberBank(ctx.from.id, ctx.session.DeleteMemberBankId);
			let caption = '';
			let inlineKeyboard = [];
			if (response.success) {
				const backButton = 'Back';
				inlineKeyboard = Markup.inlineKeyboard([
					[Markup.button.callback(backButton, 'myBankAction')],
				]);
				clearSession(ctx);
				caption = 'Bank was deleted.';
			}
			else {
				const menuButton = 'Main Menu';
				inlineKeyboard = Markup.inlineKeyboard([
					[Markup.button.callback(menuButton, 'menuAction')]
				]);
				caption = 'Invalid delete.';
			}

			await ctx.reply(caption, { parse_mode: 'HTML', ...inlineKeyboard })
				.then(msg => ctx.addToHistory(msg.message_id));

		} catch (err) {
			await log(ctx, err);
		}
	});

	async function myBankAction(ctx) {
		const backButton = 'Back';
		const addBankButton = 'Add a new bank';
		const deleteBankButton = 'Delete a bank';

		const inlineKeyboard = Markup.inlineKeyboard([
			[Markup.button.callback(addBankButton, 'addBankAction')],
			[Markup.button.callback(deleteBankButton, 'deleteBankAction')],
			[Markup.button.callback(backButton, 'backAction')],
		]);
		let caption = await handleMemberBankCaption(ctx);
		await ctx.reply(caption, { parse_mode: 'HTML', ...inlineKeyboard })
			.then(msg => ctx.addToHistory(msg.message_id));
	}

	async function addBankAction(ctx) {
		try {
			let caption = 'Select bank:\n';
			const backButton = 'Back';
			const response = await ctx.stub.getBanks();
			let inlineKeyboard = [];
			let buttonArray = [];

			if (response.success) {
				if (response.dataList.length) {
					let banks = response.dataList.sort((a, b) => (a.name.localeCompare(b.name)));
					for (const bank of banks) {
						buttonArray.push(Markup.button.callback(bank.name, 'selectBankAction:' + `${bank.id}:${bank.name}`));
					}
					while (buttonArray.length > 0) {
						inlineKeyboard.push(buttonArray.splice(0, 3));
					}
				}
			}
			else {
				caption = 'Failed to get list of your banks.';
			}
			inlineKeyboard.push([Markup.button.callback(backButton, 'backAction')]);
			inlineKeyboard = Markup.inlineKeyboard(inlineKeyboard);
			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id));
		} catch (err) {
			await log(ctx, err);
		}
	}

	async function selectDeleteBank(ctx) {
		let bank_acc = ctx.session.DeleteBankList.find(function (val) {
			return val.id == ctx.session.DeleteMemberBankId;
		});
		const caption = `Bank: ${bank_acc.name}\nAccount Name: ${bank_acc.accountHolderName}\nAccount No: ${bank_acc.accountNumber}\nConfirm?`;
		const backButton = 'Back';
		const yesButton ='Yes';
		const inlineKeyboard = Markup.inlineKeyboard([
			[Markup.button.callback(yesButton, 'deleteBankAPIAction')],
			[Markup.button.callback(backButton, 'backAction')]
		]);
		await ctx.reply(caption, inlineKeyboard)
			.then(msg => ctx.addToHistory(msg.message_id));
	}

	async function handleMemberBankCaption(ctx) {
		try {
			let caption = 'Your bank list is empty.';
			const response = await ctx.stub.getMemberBanks(ctx.from.id);

			if (response.success && response.dataList.length) {
				let bank_list = response.dataList.sort((a, b) => (a.name.localeCompare(b.name)));
				/* ---------------------------- Populate member bank ---------------------------- */
				caption = 'Your banks:\n';
				bank_list.forEach((val) => {
					caption += `Bank: ${val.name || '-'}\nAccount Name: ${val.accountHolderName || '-'}\nAccount No: ${val.accountNumber || '-' }`;
				});
			}
			return caption;
		} catch (err) {
			await log(ctx, err);
		}
	}


	scene.on(message('text'), async ctx => {
		const sessionSettingAction = ctx.session.SettingAction ?? null;
		switch (sessionSettingAction) {
			case 'EnterAccountName':
				await onTextAccountName(ctx);
				break;
			case 'EnterAccountNo':
				await onTextAccountNo(ctx);
				break;
			default:
				clearSession(ctx);
				await noComprende(ctx);
		}
	});

	async function onTextAccountName(ctx) {
		ctx.session.AddBankAccountName = ctx.message.text;
		if (ctx.session.AddBankAccountName.toString().length > 40) {
			await ctx.reply$('Input too long.');
			const caption = `Bank: ${ctx.session.AddBankName}\nEnter Account Name:`;
			const backButton = 'Back';
			const inlineKeyboard = Markup.inlineKeyboard([
				[Markup.button.callback(backButton, 'myBankAction')],
			]);
			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id))
		} else {
			ctx.session.SettingAction = 'EnterAccountNo';
			const caption = `Bank: ${ctx.session.AddBankName ?? '-'}\nAccount Name: ${ctx.session.AddAccountName}\nEnter Account No:`;
			const backButton = 'Back';
			const inlineKeyboard = Markup.inlineKeyboard([
				[Markup.button.callback(backButton, 'backAction')],
			]);

			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id))
		}
	}

	async function onTextAccountNo(ctx) {
		const text = ctx.message.text;
		const regex = /^\d+$/;
		if (text.toString().length > 34) {
			await ctx.reply$('Input too long.');
			const caption = `Bank: ${ctx.session.AddBankName ?? '-'}\nAccount Name: ${ctx.session.AddBankAccountName}\nEnter Account No:`;
			const backButton = 'Back';
			const inlineKeyboard = Markup.inlineKeyboard([
				[Markup.button.callback(backButton, 'backAction')],
			]);
			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id));
		} else if (!regex.test(text)) {
			await ctx.reply$('Invalid account number.');
		} else {
			ctx.session.AddBankAccountNo = text;
			const yesButton = 'Yes';
			const backButton = 'Back';
			const inlineKeyboard = Markup.inlineKeyboard([
				[Markup.button.callback(yesButton, 'addBankAPIAction')],
				[Markup.button.callback(backButton, 'backAction')],
			]);
			const caption = `Bank: ${ctx.session.AddBankName ?? '-'}\nAccount Name: ${ctx.session.AddBankAccountName}\nAccount No: ${ctx.session.AddBankAccountNo}\nConfirm?`;
			await ctx.reply(caption, inlineKeyboard)
				.then(msg => ctx.addToHistory(msg.message_id));
		}
	}

	scene.action('menuAction', async ctx => {
		clearSession(ctx);
		await ctx.scene.enter(シーン.MENU);
	});

	scene.action('backAction', async ctx => {
		clearSession(ctx);
		await ctx.scene.enter(シーン.SETTINGS);
	});

	// Handle all other unknown actions and text
	scene.action(/.*/, noComprende);
	scene.on(message(), noComprende);

	function clearSession(ctx) {
		ctx.session.SettingAction = null;
		ctx.session.AddBankList = null;
		ctx.session.AddBankId = null;
		ctx.session.AddBankName = null;
		ctx.session.AddBankAccountName = null;
		ctx.session.AddBankAccountNo = null;

		// ctx.session.EditBankList = null;
		// ctx.session.EditMemberBankId = null;
		// ctx.session.EditBankName = null;
		// ctx.session.EditAccountName = null;
		// ctx.session.EditBankAccountNo = null;

		ctx.session.DeleteBankList = null;
		ctx.session.DeleteMemberBankId = null;
	}
}
